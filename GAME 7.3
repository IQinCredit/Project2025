import random
import pygame

# Initialize pygame
pygame.init()

# Set up display
info = pygame.display.Info()
WIDTH, HEIGHT = info.current_w, info.current_h
screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)
pygame.display.set_caption("Fishing Game")

# Load assets
background = pygame.Surface((WIDTH, HEIGHT))
background.fill((135, 206, 250))  # Light blue sky color
font = pygame.font.Font(None, 36)

# Fish lists
common_fish = ["Goldfish", "Trout", "Bass", "Salmon", "Catfish", "Tuna", "Bluegill", "Perch", "Carp", "Sunfish",
               "Crappie", "Pike", "Walleye", "Sardine", "Anchovy", "Mackerel", "Herring", "Flounder", "Cod", "Haddock"]
uncommon_fish = ["Rainbow Trout", "Striped Bass", "Channel Catfish", "Yellow Perch", "Brown Trout", "Lake Trout",
                 "White Bass", "Black Crappie", "Blue Catfish", "Flathead Catfish", "Northern Pike", "Muskellunge",
                 "Smallmouth Bass", "Largemouth Bass", "Redfish"]
rare_fish = ["Sturgeon", "Mahi Mahi", "Wahoo", "Snook", "Tarpon", "Barracuda", "Amberjack", "Cobia", "Kingfish",
             "Grouper", "Red Snapper", "Yellowfin Tuna", "Bluefin Tuna", "Swordfish", "Marlin"]
epic_fish = ["Arapaima", "Goliath Tigerfish", "Nile Perch", "Peacock Bass", "Golden Trout", "Arctic Char",
             "Albacore Tuna", "Sailfish", "Blue Marlin", "Black Marlin"]
legendary_fish = ["Coelacanth", "Megamouth Shark", "Goblin Shark", "Oarfish", "Leedsichthys"]

# Combine all fish lists
all_fish = common_fish + uncommon_fish + rare_fish + epic_fish + legendary_fish

# Difficulty settings
difficulty = {
    "common": 3,  # Increased hold time
    "uncommon": 4,
    "rare": 5,
    "epic": 6,
    "legendary": 7
}

# Stamina system
stamina = 100
max_stamina = 100
stamina_regeneration_rate = 0.5  # Stamina regenerates 0.5 units per frame

def draw_text(text, x, y):
    label = font.render(text, True, (0, 0, 0))
    screen.blit(label, (x, y))

def draw_stamina_bar():
    bar_width = 200
    bar_height = 20
    pygame.draw.rect(screen, (255, 0, 0), (WIDTH // 2 - bar_width // 2, HEIGHT - 50, bar_width, bar_height))
    pygame.draw.rect(screen, (0, 255, 0), (WIDTH // 2 - bar_width // 2, HEIGHT - 50, bar_width * (stamina / max_stamina), bar_height))

def fishing_minigame(fish):
    global stamina
    bar_width, bar_height = WIDTH // 4, 30
    bar_x, bar_y = (WIDTH - bar_width) // 2, HEIGHT // 2
    green_width = bar_width // 5
    green_x = bar_x  # Start at the left edge
    fish_x = bar_x + bar_width // 2 - 10
    fish_speed = 2  # Slower sensitivity
    
    # Determine hold time based on fish rarity
    if fish in common_fish:
        hold_time = difficulty["common"]
    elif fish in uncommon_fish:
        hold_time = difficulty["uncommon"]
    elif fish in rare_fish:
        hold_time = difficulty["rare"]
    elif fish in epic_fish:
        hold_time = difficulty["epic"]
    else:
        hold_time = difficulty["legendary"]
    
    caught = False
    time_inside = 0
    
    green_direction = 1
    green_speed = random.uniform(1, 3)  # Randomized speed changes
    
    while True:
        screen.blit(background, (0, 0))
        draw_text("Keep the fish inside the green zone!", WIDTH // 3, HEIGHT // 3)
        pygame.draw.rect(screen, (255, 0, 0), (bar_x, bar_y, bar_width, bar_height))
        pygame.draw.rect(screen, (0, 255, 0), (green_x, bar_y, green_width, bar_height))
        pygame.draw.rect(screen, (0, 0, 255), (fish_x, bar_y, 20, bar_height))
        draw_stamina_bar()
        pygame.display.flip()
        
        keys = pygame.key.get_pressed()
        if keys[pygame.K_a]:
            fish_x -= fish_speed
            stamina -= 0.1  # Deplete stamina when reeling
        if keys[pygame.K_d]:
            fish_x += fish_speed
            stamina -= 0.1  # Deplete stamina when reeling
        
        # Regenerate stamina when not reeling
        if not keys[pygame.K_a] and not keys[pygame.K_d]:
            stamina = min(max_stamina, stamina + stamina_regeneration_rate)
        
        green_x += green_direction * green_speed
        if green_x <= bar_x or green_x + green_width >= bar_x + bar_width:
            green_direction *= -1  # Reverse direction when hitting the edges
            green_speed = random.uniform(1, 3)  # Change speed dynamically
        
        if green_x <= fish_x <= green_x + green_width:
            time_inside += 1
        else:
            time_inside = 0
        
        if time_inside >= hold_time * 60:  # Increased hold time (60 frames per second)
            caught = True
            return caught
        
        if stamina <= 0:
            return False
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                return False
            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()

def fishing_game():
    global stamina
    caught_fish = []
    running = True
    message = "Do you want to start fishing? Press Y for Yes or N for No."
    game_started = False
    
    while running:
        screen.blit(background, (0, 0))
        draw_text(message, 20, 20)
        if game_started:
            draw_text("Caught Fish:", 20, 60)
            for i, fish in enumerate(caught_fish):
                draw_text(f"- {fish}", 20, 90 + i * 30)
        
        pygame.display.flip()
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if not game_started:
                    if event.key == pygame.K_y:
                        game_started = True
                        message = "Press SPACE to cast your line."
                    elif event.key == pygame.K_n:
                        running = False
                elif event.key == pygame.K_SPACE:
                    stamina = max_stamina  # Reset stamina
                    fish = random.choice(all_fish)
                    if fishing_minigame(fish):
                        caught_fish.append(fish)
                        message = f"You caught a {fish}!"
                    else:
                        message = "The fish got away!"
                elif event.key == pygame.K_ESCAPE:
                    running = False
    
    pygame.quit()

if __name__ == "__main__":
    fishing_game()